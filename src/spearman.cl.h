const char* spearman_cl = 
"\n"
"\n"
"\n"
"void switch_f(__local float* a, __local float* b)\n"
"{\n"
"   float c = *a;\n"
"   *a = *b;\n"
"   *b = c;\n"
"}\n"
"\n"
"\n"
"\n"
"void switch_i(__local int* a, __local int* b)\n"
"{\n"
"   int c = *a;\n"
"   *a = *b;\n"
"   *b = c;\n"
"}\n"
"\n"
"\n"
"\n"
"void build_lists(int aInd, int bInd, int size, int chunk, __local float* aList,\n"
"                 __local float* bList, __global float* exprs)\n"
"{\n"
"   int i,c,ix;\n"
"   for (i=0;i<chunk;++i)\n"
"   {\n"
"      for (c=0;c<2;++c)\n"
"      {\n"
"         ix = (get_local_id(0)*chunk+i)*2+c;\n"
"         if (ix<size)\n"
"         {\n"
"            if (exprs[aInd+ix]==INFINITY||exprs[bInd+ix]==INFINITY)\n"
"            {\n"
"               aList[ix] = INFINITY;\n"
"               bList[ix] = INFINITY;\n"
"            }\n"
"            else\n"
"            {\n"
"               aList[ix] = exprs[aInd+ix];\n"
"               bList[ix] = exprs[bInd+ix];\n"
"            }\n"
"         }\n"
"         else\n"
"         {\n"
"            aList[ix] = INFINITY;\n"
"            bList[ix] = INFINITY;\n"
"         }\n"
"      }\n"
"   }\n"
"   barrier(CLK_LOCAL_MEM_FENCE);\n"
"}\n"
"\n"
"\n"
"\n"
"void prune_list(int chunk, __local float* exprs, __local int* work, __local int* point)\n"
"{\n"
"   int i,c,ix;\n"
"   for (i=0;i<chunk;++i)\n"
"   {\n"
"      for (c=0;c<2;++c)\n"
"      {\n"
"         ix = (get_local_id(0)*chunk+i)*2+c;\n"
"         point[ix] = ix;\n"
"         if (exprs[ix]==INFINITY)\n"
"         {\n"
"            work[ix] = get_local_size(0)*2;\n"
"         }\n"
"         else\n"
"         {\n"
"            work[ix] = ix;\n"
"         }\n"
"      }\n"
"   }\n"
"}\n"
"\n"
"\n"
"\n"
"void double_bitonic_sort_ii(int chunk, __local int* aSort, __local int* aExtra, __local int* bSort,\n"
"                            __local int* bExtra)\n"
"{\n"
"   int bsize = get_local_size(0)*2*chunk;\n"
"   int ob,ib,i,ix,dir,a,b,t;\n"
"   for (ob=2;ob<=bsize;ob*=2)\n"
"   {\n"
"      for (ib=ob;ib>=2;ib/=2)\n"
"      {\n"
"         for (i=0;i<chunk;++i)\n"
"         {\n"
"            ix = get_local_id(0)*chunk+i;\n"
"            dir = -((ix/(ob/2))&0x1);\n"
"            t = ib/2;\n"
"            a = (ix/t)*ib+(ix%t);\n"
"            b = a + t;\n"
"            if (((aSort[a]>aSort[b])&&!dir)||((aSort[a]<aSort[b])&&dir))\n"
"            {\n"
"               switch_i(&aSort[a],&aSort[b]);\n"
"               switch_i(&aExtra[a],&aExtra[b]);\n"
"            }\n"
"            if (((bSort[a]>bSort[b])&&!dir)||((bSort[a]<bSort[b])&&dir))\n"
"            {\n"
"               switch_i(&bSort[a],&bSort[b]);\n"
"               switch_i(&bExtra[a],&bExtra[b]);\n"
"            }\n"
"         }\n"
"         barrier(CLK_LOCAL_MEM_FENCE);\n"
"      }\n"
"   }\n"
"}\n"
"\n"
"\n"
"\n"
"void construct_list(int chunk, __local float* exprs, __local float* list, __local int* point)\n"
"{\n"
"   int i,c,ix;\n"
"   for (i=0;i<chunk;++i)\n"
"   {\n"
"      for (c=0;c<2;++c)\n"
"      {\n"
"         ix = (get_local_id(0)*chunk+i)*2+c;\n"
"         list[ix] = exprs[point[ix]];\n"
"      }\n"
"   }\n"
"}\n"
"\n"
"\n"
"\n"
"void bitonic_sort_ff(int chunk, __local float* sort, __local float* extra)\n"
"{\n"
"   int bsize = get_local_size(0)*2*chunk;\n"
"   int ob,ib,i,ix,dir,a,b,t;\n"
"   for (ob=2;ob<=bsize;ob*=2)\n"
"   {\n"
"      for (ib=ob;ib>=2;ib/=2)\n"
"      {\n"
"         for (i=0;i<chunk;++i)\n"
"         {\n"
"            ix = get_local_id(0)*chunk+i;\n"
"            dir = -((ix/(ob/2))&0x1);\n"
"            t = ib/2;\n"
"            a = (ix/t)*ib+(ix%t);\n"
"            b = a + t;\n"
"            if (((sort[a]>sort[b])&&!dir)||((sort[a]<sort[b])&&dir))\n"
"            {\n"
"               switch_f(&sort[a],&sort[b]);\n"
"               switch_f(&extra[a],&extra[b]);\n"
"            }\n"
"         }\n"
"         barrier(CLK_LOCAL_MEM_FENCE);\n"
"      }\n"
"   }\n"
"}\n"
"\n"
"\n"
"\n"
"void bitonic_sort_fi(int chunk, __local float* sort, __local int* extra)\n"
"{\n"
"   int bsize = get_local_size(0)*2*chunk;\n"
"   int ob,ib,i,ix,dir,a,b,t;\n"
"   for (ob=2;ob<=bsize;ob*=2)\n"
"   {\n"
"      for (ib=ob;ib>=2;ib/=2)\n"
"      {\n"
"         for (i=0;i<chunk;++i)\n"
"         {\n"
"            ix = get_local_id(0)*chunk+i;\n"
"            dir = -((ix/(ob/2))&0x1);\n"
"            t = ib/2;\n"
"            a = (ix/t)*ib+(ix%t);\n"
"            b = a + t;\n"
"            if (((sort[a]>sort[b])&&!dir)||((sort[a]<sort[b])&&dir))\n"
"            {\n"
"               switch_f(&sort[a],&sort[b]);\n"
"               switch_i(&extra[a],&extra[b]);\n"
"            }\n"
"         }\n"
"         barrier(CLK_LOCAL_MEM_FENCE);\n"
"      }\n"
"   }\n"
"}\n"
"\n"
"\n"
"\n"
"long calc_ranks(int size, int chunk, __local long* sums, __local int* ranks)\n"
"{\n"
"   long c;\n"
"   int i,ix;\n"
"   for (i=0;i<chunk;++i)\n"
"   {\n"
"      ix = (get_local_id(0)*chunk+i)*2;\n"
"      if (ix<size)\n"
"      {\n"
"         c = ranks[ix]-(ix+1);\n"
"         sums[ix] = c*c;\n"
"      }\n"
"      else\n"
"      {\n"
"         sums[ix] = 0.0;\n"
"      }\n"
"      if ((ix+1)<size)\n"
"      {\n"
"         c = ranks[ix+1]-(ix+2);\n"
"         sums[ix+1] = c*c;\n"
"      }\n"
"      else\n"
"      {\n"
"         sums[ix+1] = 0.0;\n"
"      }\n"
"   }\n"
"   barrier(CLK_LOCAL_MEM_FENCE);\n"
"}\n"
"\n"
"\n"
"\n"
"void accumulate(int chunk, __local long* summation)\n"
"{\n"
"   int hbsize = get_local_size(0)*chunk;\n"
"   int i,ix,b;\n"
"   for (b=hbsize;b>=1;b/=2)\n"
"   {\n"
"      for (i=0;i<chunk;++i)\n"
"      {\n"
"         ix = get_local_id(0)*chunk+i;\n"
"         if (ix<b)\n"
"         {\n"
"            summation[ix] += summation[ix+b];\n"
"         }\n"
"      }\n"
"      barrier(CLK_LOCAL_MEM_FENCE);\n"
"   }\n"
"}\n"
"\n"
"\n"
"\n"
"void make_debug(int chunk, __local float* alist, __local float* blist, __global float* atest,\n"
"                __global float* btest)\n"
"{\n"
"   int i,ix;\n"
"   for (i=0;i<chunk;++i)\n"
"   {\n"
"      ix = (get_local_id(0)*chunk+i)*2;\n"
"      atest[ix] = alist[ix];\n"
"      btest[ix] = blist[ix];\n"
"      atest[ix+1] = alist[ix+1];\n"
"      btest[ix+1] = blist[ix+1];\n"
"   }\n"
"   barrier(CLK_LOCAL_MEM_FENCE);\n"
"}\n"
"\n"
"\n"
"\n"
"__kernel void spearman(int size, int chunk, __global int* insts, __global float* exprs,\n"
"                       __global float* result, __local float* alist, __local float* blist,\n"
"                       __local int* rank, __local long* summation, __global float* atest,\n"
"                       __global float* btest, __local float* aTmpList, __local float* bTmpList,\n"
"                       __local int* aWork, __local int* bWork, __local int* aPoint,\n"
"                       __local int* bPoint)\n"
"{\n"
"   int i = get_group_id(0)*2;\n"
"   build_lists(insts[i],insts[i+1],size,chunk,aTmpList,bTmpList,exprs);\n"
"   prune_list(chunk,aTmpList,aWork,aPoint);\n"
"   prune_list(chunk,bTmpList,bWork,bPoint);\n"
"   barrier(CLK_LOCAL_MEM_FENCE);\n"
"   double_bitonic_sort_ii(chunk,aWork,aPoint,bWork,bPoint);\n"
"   construct_list(chunk,aTmpList,alist,aPoint);\n"
"   construct_list(chunk,bTmpList,blist,bPoint);\n"
"   barrier(CLK_LOCAL_MEM_FENCE);\n"
"   make_debug(chunk,alist,blist,atest,btest);\n"
"   //bitonic_sort_ff(chunk,alist,blist);\n"
"   //bitonic_sort_fi(chunk,blist,rank);\n"
"   //calc_ranks(size,chunk,summation,rank);\n"
"   //accumulate(chunk,summation);\n"
"   //if (get_local_id(0)==0)\n"
"   //{\n"
"   //   *result = 1.0-(6.0*summation[0]/((float)(size*(size*size-1))));\n"
"   //}\n"
"}\n"
"";
