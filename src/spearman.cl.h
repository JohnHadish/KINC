const char* spearman_cl = 
"\n"
"\n"
"\n"
"void switch_f(__global float* a, __global float* b)\n"
"{\n"
"   float c = *a;\n"
"   *a = *b;\n"
"   *b = c;\n"
"}\n"
"\n"
"\n"
"\n"
"void switch_i(__global int* a, __global int* b)\n"
"{\n"
"   int c = *a;\n"
"   *a = *b;\n"
"   *b = c;\n"
"}\n"
"\n"
"\n"
"\n"
"void fetch_lists(int aInd, int bInd, int size, int chunk, __global float* aList,\n"
"                 __global float* bList, __global float* exprs)\n"
"{\n"
"   int i,c,ix;\n"
"   for (i=0;i<chunk;++i)\n"
"   {\n"
"      for (c=0;c<2;++c)\n"
"      {\n"
"         ix = (get_local_id(0)*chunk+i)*2+c;\n"
"         if (ix<size)\n"
"         {\n"
"            if (isnan(exprs[aInd+ix])||isnan(exprs[bInd+ix]))\n"
"            {\n"
"               aList[ix] = INFINITY;\n"
"               bList[ix] = INFINITY;\n"
"            }\n"
"            else\n"
"            {\n"
"               aList[ix] = exprs[aInd+ix];\n"
"               bList[ix] = exprs[bInd+ix];\n"
"            }\n"
"         }\n"
"         else\n"
"         {\n"
"            aList[ix] = INFINITY;\n"
"            bList[ix] = INFINITY;\n"
"         }\n"
"      }\n"
"   }\n"
"   barrier(CLK_LOCAL_MEM_FENCE);\n"
"}\n"
"\n"
"\n"
"\n"
"void prune_lists(int chunk, __global float* aExprs, __global int* aWork, __global int* aPoint,\n"
"                 __global float* bExprs, __global int* bWork, __global int* bPoint)\n"
"{\n"
"   int i,c,ix;\n"
"   for (i=0;i<chunk;++i)\n"
"   {\n"
"      for (c=0;c<2;++c)\n"
"      {\n"
"         ix = (get_local_id(0)*chunk+i)*2+c;\n"
"         aPoint[ix] = ix;\n"
"         bPoint[ix] = ix;\n"
"         if (isinf(aExprs[ix]))\n"
"         {\n"
"            aWork[ix] = get_local_size(0)*4;\n"
"         }\n"
"         else\n"
"         {\n"
"            aWork[ix] = ix;\n"
"         }\n"
"         if (isinf(bExprs[ix]))\n"
"         {\n"
"            bWork[ix] = get_local_size(0)*4;\n"
"         }\n"
"         else\n"
"         {\n"
"            bWork[ix] = ix;\n"
"         }\n"
"      }\n"
"   }\n"
"   barrier(CLK_LOCAL_MEM_FENCE);\n"
"}\n"
"\n"
"\n"
"\n"
"void double_bitonic_sort_ii(int chunk, __global int* aSort, __global int* aExtra, __global int* bSort,\n"
"                            __global int* bExtra)\n"
"{\n"
"   int bsize = get_local_size(0)*2*chunk;\n"
"   int ob,ib,i,ix,dir,a,b,t;\n"
"   for (ob=2;ob<=bsize;ob*=2)\n"
"   {\n"
"      for (ib=ob;ib>=2;ib/=2)\n"
"      {\n"
"         for (i=0;i<chunk;++i)\n"
"         {\n"
"            ix = get_local_id(0)*chunk+i;\n"
"            dir = -((ix/(ob/2))&0x1);\n"
"            t = ib/2;\n"
"            a = (ix/t)*ib+(ix%t);\n"
"            b = a + t;\n"
"            if (((aSort[a]>aSort[b])&&!dir)||((aSort[a]<aSort[b])&&dir))\n"
"            {\n"
"               switch_i(&aSort[a],&aSort[b]);\n"
"               switch_i(&aExtra[a],&aExtra[b]);\n"
"            }\n"
"            if (((bSort[a]>bSort[b])&&!dir)||((bSort[a]<bSort[b])&&dir))\n"
"            {\n"
"               switch_i(&bSort[a],&bSort[b]);\n"
"               switch_i(&bExtra[a],&bExtra[b]);\n"
"            }\n"
"         }\n"
"         barrier(CLK_LOCAL_MEM_FENCE);\n"
"      }\n"
"   }\n"
"}\n"
"\n"
"\n"
"\n"
"void construct_lists(int chunk, __global float* aExprs, __global float* aList, __global int* aPoint,\n"
"                     __global float* bExprs, __global float* bList, __global int* bPoint,\n"
"                     __global int* rank, __global int* iRank)\n"
"{\n"
"   int i,c,ix;\n"
"   for (i=0;i<chunk;++i)\n"
"   {\n"
"      for (c=0;c<2;++c)\n"
"      {\n"
"         ix = (get_local_id(0)*chunk+i)*2+c;\n"
"         aList[ix] = aExprs[aPoint[ix]];\n"
"         bList[ix] = bExprs[bPoint[ix]];\n"
"         if (isinf(aList[ix]))\n"
"         {\n"
"            rank[ix] = 0;\n"
"            iRank[ix] = 0;\n"
"         }\n"
"         else\n"
"         {\n"
"            rank[ix] = ix+1;\n"
"            iRank[ix] = ix+1;\n"
"         }\n"
"      }\n"
"   }\n"
"   barrier(CLK_LOCAL_MEM_FENCE);\n"
"}\n"
"\n"
"\n"
"\n"
"void bitonic_sort_ff(int chunk, __global float* sort, __global float* extra)\n"
"{\n"
"   int bsize = get_local_size(0)*2*chunk;\n"
"   int ob,ib,i,ix,dir,a,b,t;\n"
"   for (ob=2;ob<=bsize;ob*=2)\n"
"   {\n"
"      for (ib=ob;ib>=2;ib/=2)\n"
"      {\n"
"         for (i=0;i<chunk;++i)\n"
"         {\n"
"            ix = get_local_id(0)*chunk+i;\n"
"            dir = -((ix/(ob/2))&0x1);\n"
"            t = ib/2;\n"
"            a = (ix/t)*ib+(ix%t);\n"
"            b = a + t;\n"
"            if (((sort[a]>sort[b])&&!dir)||((sort[a]<sort[b])&&dir))\n"
"            {\n"
"               switch_f(&sort[a],&sort[b]);\n"
"               switch_f(&extra[a],&extra[b]);\n"
"            }\n"
"         }\n"
"         barrier(CLK_LOCAL_MEM_FENCE);\n"
"      }\n"
"   }\n"
"}\n"
"\n"
"\n"
"\n"
"void bitonic_sort_fi(int chunk, __global float* sort, __global int* extra)\n"
"{\n"
"   int bsize = get_local_size(0)*2*chunk;\n"
"   int ob,ib,i,ix,dir,a,b,t;\n"
"   for (ob=2;ob<=bsize;ob*=2)\n"
"   {\n"
"      for (ib=ob;ib>=2;ib/=2)\n"
"      {\n"
"         for (i=0;i<chunk;++i)\n"
"         {\n"
"            ix = get_local_id(0)*chunk+i;\n"
"            dir = -((ix/(ob/2))&0x1);\n"
"            t = ib/2;\n"
"            a = (ix/t)*ib+(ix%t);\n"
"            b = a + t;\n"
"            if (((sort[a]>sort[b])&&!dir)||((sort[a]<sort[b])&&dir))\n"
"            {\n"
"               switch_f(&sort[a],&sort[b]);\n"
"               switch_i(&extra[a],&extra[b]);\n"
"            }\n"
"         }\n"
"         barrier(CLK_LOCAL_MEM_FENCE);\n"
"      }\n"
"   }\n"
"}\n"
"\n"
"\n"
"\n"
"long calc_ranks(int chunk, __global long* sums, __global int* rank, __global int* iRank)\n"
"{\n"
"   long tmp;\n"
"   int i,c,ix;\n"
"   for (i=0;i<chunk;++i)\n"
"   {\n"
"      for (c=0;c<2;++c)\n"
"      {\n"
"         ix = (get_local_id(0)*chunk+i)*2+c;\n"
"         tmp = rank[ix] - iRank[ix];\n"
"         sums[ix] = tmp*tmp;\n"
"         if (rank[ix]==0)\n"
"         {\n"
"            iRank[ix] = 0;\n"
"         }\n"
"         else\n"
"         {\n"
"            iRank[ix] = 1;\n"
"         }\n"
"      }\n"
"   }\n"
"   barrier(CLK_LOCAL_MEM_FENCE);\n"
"}\n"
"\n"
"\n"
"\n"
"void accumulate(int chunk, __global long* summation, __global int* iRank)\n"
"{\n"
"   int hbsize = get_local_size(0)*chunk;\n"
"   int i,ix,b;\n"
"   for (b=hbsize;b>=1;b/=2)\n"
"   {\n"
"      for (i=0;i<chunk;++i)\n"
"      {\n"
"         ix = get_local_id(0)*chunk+i;\n"
"         if (ix<b)\n"
"         {\n"
"            summation[ix] += summation[ix+b];\n"
"            iRank[ix] += iRank[ix+b];\n"
"         }\n"
"      }\n"
"      barrier(CLK_LOCAL_MEM_FENCE);\n"
"   }\n"
"}\n"
"\n"
"\n"
"\n"
"__kernel void spearman(int size, int chunk, int minSize, __global int* insts, __global float* exprs,\n"
"                       __global float* result, __global float* alistF, __global float* blistF,\n"
"                       __global int* rankF, __global int* iRankF, __global long* summationF,\n"
"                       __global float* aTmpListF, __global float* bTmpListF, __global int* aWorkF,\n"
"                       __global int* bWorkF, __global int* aPointF, __global int* bPointF)\n"
"{\n"
"   int i = get_group_id(0)*2;\n"
"   int j = get_group_id(0);\n"
"   int wsize = get_local_size(0)*2*chunk;\n"
"   __global float* alist = &alistF[j*wsize];\n"
"   __global float* blist = &blistF[j*wsize];\n"
"   __global int* rank = &rankF[j*wsize];\n"
"   __global int* iRank = &iRankF[j*wsize];\n"
"   __global long* summation = &summationF[j*wsize];\n"
"   __global float* aTmpList = &aTmpListF[j*wsize];\n"
"   __global float* bTmpList = &bTmpListF[j*wsize];\n"
"   __global int* aWork = &aWorkF[j*wsize];\n"
"   __global int* bWork = &bWorkF[j*wsize];\n"
"   __global int* aPoint = &aPointF[j*wsize];\n"
"   __global int* bPoint = &bPointF[j*wsize];\n"
"   fetch_lists(insts[i],insts[i+1],size,chunk,aTmpList,bTmpList,exprs);\n"
"   prune_lists(chunk,aTmpList,aWork,aPoint,bTmpList,bWork,bPoint);\n"
"   double_bitonic_sort_ii(chunk,aWork,aPoint,bWork,bPoint);\n"
"   construct_lists(chunk,aTmpList,alist,aPoint,bTmpList,blist,bPoint,rank,iRank);\n"
"   bitonic_sort_ff(chunk,alist,blist);\n"
"   bitonic_sort_fi(chunk,blist,rank);\n"
"   calc_ranks(chunk,summation,rank,iRank);\n"
"   accumulate(chunk,summation,iRank);\n"
"   if (get_local_id(0)==0)\n"
"   {\n"
"      size = iRank[0];\n"
"      if (size<minSize)\n"
"      {\n"
"         result[j] = NAN;\n"
"      }\n"
"      else\n"
"      {\n"
"         result[j] = 1.0-(6.0*(float)summation[0]/((float)size*(((float)size*(float)size)-1)));\n"
"      }\n"
"   }\n"
"}\n"
"";
