#ifndef _MIXMOD_
#define _MIXMOD_

#include <mixmod/Kernel/IO/Data.h>
#include <mixmod/Kernel/IO/Label.h>
#include <mixmod/Kernel/IO/LabelDescription.h>
#include <mixmod/Kernel/IO/GaussianData.h>
#include <mixmod/Kernel/IO/DataDescription.h>
#include <mixmod/Clustering/ClusteringInput.h>
#include <mixmod/Clustering/ClusteringOutput.h>
#include <mixmod/Clustering/ClusteringModelOutput.h>
#include <mixmod/Clustering/ClusteringMain.h>

#include "clusters.h"
#include "../ematrix.h"

class MixModClusters {
  private:
    // An n x 2 matrix needed for input into the GaussianData function
    // of the MixModLib.  We will construct this matrix using the input
    // arrays provided.
    double ** data;

    // The number of samples.
    int num_samples;

    // The type of data used for this mixture model.
    XEM::DataType dataType;
    XEM::GaussianData * gdata;
    XEM::DataDescription * dataDescription;
    XEM::ClusteringInput * cInput;
    XEM::ClusteringOutput * cOutput;

    // nbCluster contains the numbers of clusters to be tested.
    vector<int64_t> nbCluster;

    // The vector containing the cluster membership.
    int64_t * labels;

    // The list of clusters generated by this clustering method.
    PairWiseCluster ** pwcl;

  public:
    MixModClusters(double *a, double *b, int n);
    ~MixModClusters();

    void run();
    int64_t * getLabels() { return labels; }
};

#endif
