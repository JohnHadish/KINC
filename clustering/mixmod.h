#ifndef _MIXMOD_
#define _MIXMOD_

#include <mixmod/Kernel/IO/Data.h>
#include <mixmod/Kernel/IO/Label.h>
#include <mixmod/Kernel/IO/LabelDescription.h>
#include <mixmod/Kernel/IO/GaussianData.h>
#include <mixmod/Kernel/IO/DataDescription.h>
#include <mixmod/Clustering/ClusteringInput.h>
#include <mixmod/Clustering/ClusteringOutput.h>
#include <mixmod/Clustering/ClusteringModelOutput.h>
#include <mixmod/Clustering/ClusteringMain.h>

#include "clusters.h"
#include "../ematrix.h"
#include "../similarity.h"
#include "../similarity/spearman.h"

class MixModClusters {
  private:

    // The pair of genes on which the clustering will occur.
    PairWiseSet * pwset;

    // The MixMod Lib wants the data as an n x 2 array of doubles.  So
    // the construct will extract the data from the pwset object and
    // convert it into this data array.
    double ** data;

    // The type of data used for this mixture model.
    XEM::DataType dataType;
    XEM::GaussianData * gdata;
    XEM::DataDescription * dataDescription;
    XEM::ClusteringInput * cInput;
    XEM::ClusteringOutput * cOutput;

    // nbCluster contains the numbers of clusters to be tested.
    vector<int64_t> nbCluster;

    // The vector containing the cluster membership.
    int64_t * labels;

    // The list of clusters generated by this clustering method.
    PairWiseClusterList * pwcl;

    // The minimum number of observations that must be present to
    // perform clustering.
    int min_obs;

  public:
    MixModClusters(PairWiseSet *pwset, int min_obs);
    ~MixModClusters();

    void run();
    int64_t * getLabels() { return labels; }
};

#endif
